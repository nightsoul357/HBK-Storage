@inherits HBKDialogBase

<MudDialog>
    @*<TitleContent>
        <MudText Typo="Typo.h6">
        新增儲存群組
        </MudText>
        </TitleContent>*@
    <DialogContent>
        <MudGrid>
            @if (this.IsEditMode)
            {
                <MudItem xs="12" sm="8" md="6">
                    <MudTextField Value="this.StorageGroupResponse.Storage_group_id" Label="ID" Variant="Variant.Outlined" ReadOnly="true" />
                </MudItem>
            }
            <MudItem xs="12" sm="8" md="6">
                <MudTextField @bind-Value="this.StorageGroupResponse.Name" Label="名稱" Variant="Variant.Outlined" Required="true" />
            </MudItem>
            <MudItem xs="12" sm="8" md="6">
                <MudSelect @bind-Value="this.StorageGroupResponse.Type" T="StorageType" Label="類型" Variant="Variant.Outlined" ReadOnly="this.IsEditMode">
                    @foreach (StorageType item in Enum.GetValues(typeof(StorageType)))
                    {
                        <MudSelectItem Value="@item">@item</MudSelectItem>
                    }
                </MudSelect>
            </MudItem>
            <MudItem xs="12" sm="12" md="12">
                <MudSelect @bind-Value="this.StorageGroupResponse.Sync_mode" T="SyncMode" Label="同步模式" Variant="Variant.Outlined">
                    @foreach (SyncMode item in Enum.GetValues(typeof(SyncMode)))
                    {
                        <MudSelectItem Value="@item">@item</MudSelectItem>
                    }
                </MudSelect>
            </MudItem>
            @if (this.StorageGroupResponse.Sync_mode == SyncMode.Policy)
            {
                <MudItem xs="12" sm="12" md="12">
                    <MudTextField T="string" @bind-Value="this.StorageGroupResponse.Sync_policy.Rule" Label="同步規則" Variant="Variant.Outlined" Lines="3" />
                </MudItem>
            }
            <MudItem xs="12" sm="12" md="12">
                <MudSelect @bind-Value="this.StorageGroupResponse.Clear_mode" T="ClearMode" Label="清除模式" Variant="Variant.Outlined">
                    @foreach (ClearMode item in Enum.GetValues(typeof(ClearMode)))
                    {
                        <MudSelectItem Value="@item">@item</MudSelectItem>
                    }
                </MudSelect>
            </MudItem>
            @if (this.StorageGroupResponse.Clear_mode == ClearMode.Start)
            {
                <MudItem xs="12" sm="12" md="12">
                    <MudTextField T="string" @bind-Value="this.StorageGroupResponse.Clear_policy.Rule" Label="清除規則" Variant="Variant.Outlined" Lines="3" />
                </MudItem>
            }
            <MudItem xs="12" sm="8" md="6">
                <MudNumericField @bind-Value="this.StorageGroupResponse.Upload_priority" Label="上傳優先度" Variant="Variant.Text" Min="0" Max="1000" />
            </MudItem>
            <MudItem xs="12" sm="8" md="6">
                <MudNumericField @bind-Value="this.StorageGroupResponse.Download_priority" Label="下載優先度" Variant="Variant.Text" Min="0" Max="1000" />
            </MudItem>
        </MudGrid>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="@(() => base.InvokeSafety(this.Cancel))">取消</MudButton>
        @if (this.IsEditMode)
        {
            if (this.StorageGroupResponse.Status.Contains(StorageGroupStatus.Disable))
            {
                <MudButton Color="Color.Primary" OnClick="@(() => base.InvokeSafetyAsync(this.EnableAsync))">啟用</MudButton>
            }
            else
            {
                <MudButton Color="Color.Error" OnClick="@(() => base.InvokeSafetyAsync(this.DisableAsnyc))">停用</MudButton>
            }
        }
        <MudButton Color="Color.Primary" OnClick="@(() => base.InvokeSafetyAsync(this.SaveChangeAsync))">@(this.IsEditMode ? "儲存" : "新增")</MudButton>
    </DialogActions>
</MudDialog>